* Introduction
Prerequisites:
+ [[https://nodejs.org/en/][Node.js]] installed (at least version 8 recommended)

We use the architecture described [[https://github.com/mqtt-smarthome/mqtt-smarthome/blob/master/Architecture.md][here]].
* MQTT broker
** local installation
We use [[https://github.com/mcollina/mosca][mosca]].

Install it:
#+BEGIN_SRC sh
npm install -g mosca 
#+END_SRC

Run it:
#+BEGIN_SRC sh
mosca -v
#+END_SRC

** use cloud service
We can use a free plan (Cute Cat) of [[https://www.cloudmqtt.com/plans.html][CloudMQTT]]. Note that traffic to and from the broker in the cloud will not be encrypted (due to missing SSL support).

You can either create an account or sign in with an existing GitHub or Google account.

1. Enter a name for your instance.
2. Make sure to select the "Cute Cat" free plan.
3. Select a data center. Note that US-East may have a higher load than other regions.
4. On the instance details, you will find all details needed to connect:
   + server
   + port
   + user
   + password

* Node RED

** Installation and startup

Install it:
#+BEGIN_SRC sh
npm install -g node-red
#+END_SRC

Start it:
#+BEGIN_SRC sh
node-red
#+END_SRC

The output should include a line like
#+BEGIN_QUOTE
26 Oct 10:57:14 - [info] Server now running at http://127.0.0.1:1880/
#+END_QUOTE

Open a browser at this URL.

** Sending a message to the broker
Use drag and drop to add an
+ "inject" /input/ node
+ "mqtt" /output/ node
to the current flow.

Connect them, and double click the mqtt node to configure your MQTT broker. Edit the "Server" property and set the server and port.
+ for the local mosca broker, use "localhost" for the server and 1883 for the port.
+ for the cloud broker, use the server, port, user and password informations listed on the instance details. User and password can be entered on the "Security" tab.

Set the "Topic" property.

Confirm your input, and click the /Deploy/ button in the upper right corner.

By clicking on the button at the left side of the inject node, you can send a message to the broker.

** Receiving messages from the broker
Use drag and drop to add an
+ "mqtt" /input/ node
+ "debug" /output/ node
to the current flow.

Connect them, and check that the mqtt input node uses the same server as the mqtt output node we added previously. Set the "Topic" property to the same value, too.

In the right pane, replace the "info" view with the "debug" view by clicking on the "bug" button.

Click /Deploy/ again, and send a message with the inject node from the previous step. You should now see the message in the debug pane.

You can disable your debug output by clicking the button to the right of the debug node.

* Smartphone Apps

Apps to try out: 
+ [[https://play.google.com/store/apps/details?id=net.routix.mqttdash&hl=de][MQTT Dash (IoT, Smart Home)]] (for Android)
+ [[http://1j2.com/ihometouch/][iHomeTouch]] (for iOS, please evaluate)

* Micro Controller: MQTT gateway

** Install Arduino IDE with ESP8266 support

+ Install Arduino IDE via your OS package manager or download from https://www.arduino.cc/en/Main/Software
+ Start Arduino IDE and open preferences
+ Enter http://arduino.esp8266.com/stable/package_esp8266com_index.json into "Additional Board Manager URLs" field.
+ Open "Tools > Board Manager" and install the "esp8266" package.
+ Under "Tools > Board", select Node MCU as target platform.
+ Under "Tools > Port", select the correct usb device (e.g. =/dev/ttyUSB0=) after connecting the board via USB.

** Installing OpenMQTTGateway 

+ Clone source code from https://github.com/fgather/OpenMQTTGateway.git
      
+ Open main sketch inside the repo with the Arduino IDE

#+BEGIN_SRC sh
arduino OpenMQTTGateway.ino
#+END_SRC
      
+ Copy lib folder from the cloned OpenMQTTGateway.git repo to <sketchbook location>/libraries to install all required libraries.

+ Edit User_config.h with mqtt_server IP and WiFi settings
  Variables which need to be adjusted
  + wifi_ssid
  + wifi_password
  + mqtt_server
  + mqtt_port
  + mqtt_user (for cloud only ?)
  + mqtt_pass (for cloud only ?)

+ Flash OpenMQTTGateway.ino via "Upload Sketch" and check result on Arduino console (ctrl+shift+m)
+ You should see a "Connected to broker" message in the console.

**  RF

+ Wire up the C1011 receiver as in the picture:
  file:C1011_Schaltplan.png

* Processing RF Data with Node Red

** Build and install ook en/decoder

Open a terminal in =<OpenMQTTGateway>/node-red/on-off-keying= and run:
#+BEGIN_SRC sh
npm install
npm run build
#+END_SRC

Open a terminal in the node-red "User directory" (node-red should print this information on startup) and run
#+BEGIN_SRC sh
npm install <OpenMQTTGateway>/node-red/on-off-keying
#+END_SRC

Restart node-red and reload the node-red web interface. There should now be two new nodes "ook_decode" and "ook_encode" visible.

